# -*- coding: utf-8 -*-
"""MNISTFILE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sf0_g3l4Fpeh6jXHfZESI4f9tDL3HL7c
"""

#imports
import torch, torchvision

#imports
from torch import nn
from torch import optim
from torchvision.transforms import ToTensor
import matplotlib.pyplot as plt
import torch.nn.functional as F

#parameters
nb_epoch = 5
nb_batch = 64
batch_size = 2000
lr = 0.01
momentum = 0.5
input_size = 28*28
hidden_layers = 100
log_interval = 10
random_seed = 69
torch.backends.cudnn.enabled = False
torch.manual_seed(random_seed)

#test and train data and loaders
train_data = torchvision.datasets.MNIST('mnist.data', train = True, download = True, transform = torchvision.transforms.ToTensor())
test_data = torchvision.datasets.MNIST('mnist.data', train = False, download = True, transform = torchvision.transforms.ToTensor())
train_loader = torch.utils.data.DataLoader(train_data, batch_size = nb_batch, shuffle = True, num_workers = 2)
test_loader = torch.utils.data.DataLoader(test_data, batch_size = batch_size, shuffle = True, num_workers = 2)

#varaible to stoe img and labels
checkdata = iter(train_loader)
img, label = next(checkdata)

#printing image and label
for i in range(6):
  print(label[i])
  plt.subplot(2,3,i+1)
  plt.title(label[i].numpy())
  plt.imshow(img[i][0], cmap = "gray")

#network class with 2 conv layer, 2 max pooling 1 dropout, relu activation and linearization
class myNetwork(nn.Module):
    def __init__(self):
        super(myNetwork, self).__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)
        self.conv2_drop = nn.Dropout2d(p = 0.5)
        self.fc1 = nn.Linear(320, 50)
        self.fc2 = nn.Linear(50, 10)

    def forward(self, x):
        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2_drop( self.conv2(x)), 2))
        x = x.view(-1, 320)
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        return F.log_softmax(x)

#dummy model to show representation
model = myNetwork()
repr(model)

#object for network class and optimization
network = myNetwork()
optimizer = optim.SGD(network.parameters(), lr=lr,
                      momentum=momentum)
train_losses = []
train_counter = []
test_losses = []
test_counter = [i*len(train_loader.dataset) for i in range(nb_epoch + 1)]

#training function
def train(epoch):
  network.train()
  for batch_idx, (data, target) in enumerate(train_loader):
    optimizer.zero_grad()
    output = network(data)
    loss = F.nll_loss(output, target)     #loss function
    loss.backward()
    optimizer.step()                      #optimization
    if batch_idx % log_interval == 0:
      print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
        epoch, batch_idx * len(data), len(train_loader.dataset),
        100. * batch_idx / len(train_loader), loss.item()))
      train_losses.append(loss.item())
      train_counter.append(
        (batch_idx*64) + ((epoch-1)*len(train_loader.dataset)))
      torch.save(network.state_dict(), '/gdrive/My Drive/Models/model.pth')
      torch.save(optimizer.state_dict(), '/gdrive/My Drive/Models/optimizer.pth')

#testing function
def test():
  network.eval()
  test_loss = 0
  correct = 0
  with torch.no_grad():
    for data, target in test_loader:
      output = network(data)
      test_loss += F.nll_loss(output, target, size_average=False).item()  #loss function
      pred = output.data.max(1, keepdim=True)[1]
      correct += pred.eq(target.data.view_as(pred)).sum()
  test_loss /= len(test_loader.dataset)
  test_losses.append(test_loss)
  print('\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
    test_loss, correct, len(test_loader.dataset),
    100. * correct / len(test_loader.dataset)))

#training model
test()
for epoch in range(1, nb_epoch+1):
  train(epoch)
  test()

#plotting examples and log likelyhood loss
fig = plt.figure()
plt.plot(train_counter, train_losses, color='blue')
plt.scatter(test_counter, test_losses, color='red')
plt.legend(['Train Loss', 'Test Loss'], loc='upper right')
plt.xlabel('number of training examples seen')
plt.ylabel('negative log likelihood loss')

#function to download models
from google.colab import files
files.download('model.pth')
files.download('optimizer.pth')

#mounting google drive
from google.colab import drive
drive.mount('/gdrive')

