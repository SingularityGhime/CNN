# -*- coding: utf-8 -*-
"""FinalTask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S_hVwCVuY8riIApDSYhhlIwWzw6VuVeS
"""

#imports
import torch, torchvision
from torch import nn
from torch import optim
from torchvision.transforms import ToTensor
import matplotlib.pyplot as plt
import torch.nn.functional as F

#parameters
nb_epoch = 5
nb_batch = 500
batch_size = 2000
lr = 0.01
momentum = 0.5
input_size = 28*28
hidden_layers = 100
log_interval = 10
random_seed = 69
torch.backends.cudnn.enabled = False
torch.manual_seed(random_seed)

#loading dataset of MNIST
train_data = torchvision.datasets.MNIST('mnist.data', train = True, download = True, transform = torchvision.transforms.ToTensor())
test_data = torchvision.datasets.MNIST('mnist.data', train = False, download = True, transform = torchvision.transforms.ToTensor())
train_loader = torch.utils.data.DataLoader(train_data, batch_size = nb_batch, shuffle = True, num_workers = 2)
test_loader = torch.utils.data.DataLoader(test_data, batch_size = batch_size, shuffle = True, num_workers = 2)

checkdata = iter(train_loader)
img, label = next(checkdata)

#classes similar to the ones before
class myNetwork(nn.Module):
    def __init__(self):
        super(myNetwork, self).__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)
        self.conv2_drop = nn.Dropout2d(p = 0.5)
        self.fc1 = nn.Linear(320, 50)
        self.fc2 = nn.Linear(50, 10)

    def forward(self, x):
        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2_drop( self.conv2(x)), 2))
        x = x.view(-1, 320)
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        return F.log_softmax(x)

#new network object and optimization
network = myNetwork()
optimizer = optim.SGD(network.parameters(), lr=lr,
                      momentum=momentum)
train_losses = []
train_counter = []
test_losses = []
test_counter = [i*len(train_loader.dataset) for i in range(nb_epoch + 1)]

#training function
def train(epoch, train_loaders):
  network.train()
  for batch_idx, (data, target) in enumerate(train_loaders):
    optimizer.zero_grad()
    output = network(data)
    loss = F.nll_loss(output, target)
    loss.backward()
    optimizer.step()
    if batch_idx % log_interval == 0:
      print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
        epoch, batch_idx * len(data), len(train_loaders.dataset),
        100. * batch_idx / len(train_loaders), loss.item()))
      train_losses.append(loss.item())
      train_counter.append(
        (batch_idx*64) + ((epoch-1)*len(train_loaders.dataset)))

#test function
def test(test_loaders):
  network.eval()
  test_loss = 0
  correct = 0
  with torch.no_grad():
    for data, target in test_loaders:
      output = network(data)
      test_loss += F.nll_loss(output, target, size_average=False).item()
      pred = output.data.max(1, keepdim=True)[1]
      correct += pred.eq(target.data.view_as(pred)).sum()
  test_loss /= len(test_loaders.dataset)
  test_losses.append(test_loss)
  print('\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
    test_loss, correct, len(test_loaders.dataset),
    100. * correct / len(test_loaders.dataset)))
  return test_loss

#training for multiple number of epochs ranging from 1 epoch in one training cycle to 20 epoch in one training cycle
loss_for_epoch = []             #list to store losses for each number of epoch incremented
test(test_loaders=test_loader)
for i in range(20):
  epoch = i
  loss = 0
  for epoch in range(1, epoch+1):
    train(epoch, train_loaders=train_loader)
    loss = test(test_loaders=test_loader)
  loss_for_epoch.append(loss)

#training for incremented batch size.. 500 in every cycle
loss_for_batch_size = []        #list to store batch
for i in range(20):             
  new_nb_batch = 50*(i+1)        #500 increments each cycle for 5 epochs in each cycle
  new_train_loader = torch.utils.data.DataLoader(train_data, batch_size = new_nb_batch, shuffle = True, num_workers = 2)
  new_test_loader = torch.utils.data.DataLoader(test_data, batch_size = batch_size, shuffle = True, num_workers = 2)
  loss_batch = 0
  for epoch in range(1, nb_epoch+1):
    train(epoch,train_loaders=new_train_loader)
    loss_batch = test(test_loaders=new_test_loader)
  loss_for_batch_size.append(loss_batch)

loss_for_batch_size

loss_for_epoch

#network class with 2 conv layer, 2 max pooling 1 dropout, relu activation and linearization and a second dropout layer
class myNetwork5(nn.Module):
    def __init__(self):
        super(myNetwork5, self).__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)
        self.conv2_drop = nn.Dropout2d(p = 0.5)
        self.fc1 = nn.Linear(320, 50)
        self.fc2 = nn.Linear(50, 10)

    def forward(self, x):
        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2_drop( self.conv2(x)), 2))
        x = x.view(-1, 320)
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        x = F.dropout(x, training=self.training)
        return F.log_softmax(x)

#object for network class and optimization
network5 = myNetwork5()
optimizer5 = optim.SGD(network.parameters(), lr=lr,
                      momentum=momentum)
train_losses5 = []
train_counter5 = []
test_losses5 = []
test_counter5 = [i*len(train_loader.dataset) for i in range(nb_epoch + 1)]

#training function
def train5(epoch):
  network5.train()
  for batch_idx, (data, target) in enumerate(train_loader):
    optimizer5.zero_grad()
    output = network(data)
    loss = F.nll_loss(output, target)     #loss function
    loss.backward()
    optimizer5.step()                      #optimization
    if batch_idx % log_interval == 0:
      print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
        epoch, batch_idx * len(data), len(train_loader.dataset),
        100. * batch_idx / len(train_loader), loss.item()))
      train_losses5.append(loss.item())
      train_counter5.append(
        (batch_idx*64) + ((epoch-1)*len(train_loader.dataset)))

#testing function
def test5():
  network5.eval()
  test_loss = 0
  correct = 0
  with torch.no_grad():
    for data, target in test_loader:
      output = network(data)
      test_loss += F.nll_loss(output, target, size_average=False).item()  #loss function
      pred = output.data.max(1, keepdim=True)[1]
      correct += pred.eq(target.data.view_as(pred)).sum()
  test_loss /= len(test_loader.dataset)
  test_losses5.append(test_loss)
  print('\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
    test_loss, correct, len(test_loader.dataset),
    100. * correct / len(test_loader.dataset)))

#training model with second dropout
test5()
for epoch in range(1, nb_epoch+1):
  train5(epoch)
  test5()

print(test_losses5)

