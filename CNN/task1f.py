# -*- coding: utf-8 -*-
"""Task1F.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FgJePB07hXu6DyXzjcBk72LBkDU8W9-0
"""

#imports
import torch, torchvision
from torch import nn
from torch import optim
from torchvision.transforms import ToTensor
import matplotlib.pyplot as plt
import torch.nn.functional as F
import cv2
import glob
import numpy as np

#parameters
nb_epoch = 5
nb_batch = 200
batch_size = 2000
lr = 0.01
momentum = 0.5
input_size = 28*28
hidden_layers = 100
log_interval = 10
random_seed = 69
torch.backends.cudnn.enabled = False
torch.manual_seed(random_seed)

#classes
class myNetwork(nn.Module):
    def __init__(self):
        super(myNetwork, self).__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)
        self.conv2_drop = nn.Dropout2d(p = 0.5)
        self.fc1 = nn.Linear(320, 50)
        self.fc2 = nn.Linear(50, 10)

    def forward(self, x):
        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2(x), 2))
        x = x.view(-1, 320)
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        return F.log_softmax(x)

test_data = torchvision.datasets.MNIST('mnist.data', train = False, download = True, transform = torchvision.transforms.ToTensor())
test_loader = torch.utils.data.DataLoader(test_data, batch_size = batch_size, shuffle = True, num_workers = 2)

examples = enumerate(test_loader)
batch_idx, (example_data, example_targets) = next(examples)

# Commented out IPython magic to ensure Python compatibility.
#mount
from google.colab import drive
drive.mount('/gdrive')
# %cd

#loading model and optimizing
PATH1 = r"/gdrive/My Drive/Models/model.pth"
PATH2 = r"/gdrive/My Drive/Models/optimizer.pth"
model = myNetwork()
model.load_state_dict(torch.load(PATH1))
model.eval()
optimizer = optim.SGD(model.parameters(), lr=lr,
                      momentum=momentum)
optimizer.load_state_dict(torch.load(PATH2))

#predicting and plotting the same dataset
with torch.no_grad():
  output = model(example_data)
fig = plt.figure()
for i in range(9):
  plt.subplot(3,3,i+1)
  plt.tight_layout()
  plt.imshow(example_data[i][0], cmap='gray', interpolation='none')
  plt.title("Prediction: {}".format(
    output.data.max(1, keepdim=True)[1][i].item()))
  plt.xticks([])
  plt.yticks([])

#running model on first 10 examples
for i in range(10):
  print (output[i])

#testing datasets and loader using custom numbers
Test_Dataset_Path = r"/gdrive/MyDrive/numbers/PAINT1"
train_transforms = torchvision.transforms.Compose([torchvision.transforms.Grayscale(), torchvision.transforms.Resize((28,28)), torchvision.transforms.functional.invert,torchvision.transforms.ToTensor()])
test_dataset_new = torchvision.datasets.ImageFolder(root = Test_Dataset_Path, transform = train_transforms)
mynumber_loader = torch.utils.data.DataLoader(test_dataset_new, batch_size = 9, shuffle = True, num_workers = 2)

#variables for data and label
mynumbers = enumerate(mynumber_loader)
batch_number, (image, labels) = next(mynumbers)

#prediction and output of new numbers
with torch.no_grad():
  output1 = model(image)
  fig = plt.figure()
  for i in range(9):
    plt.subplot(3,3,i+1)
    plt.tight_layout()
    plt.imshow(image[i][0], cmap='gray', interpolation='none')
    plt.title("Prediction: {}".format(
    output1.data.max(1, keepdim=True)[1][i].item()))
    plt.xticks([])
    plt.yticks([])

